{"ast":null,"code":"var _jsxFileName = \"/Users/anton.fenske/GitHub/fenske/account-management-frontend-level-3/pages/index.js\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport styles from '../styles/Home.module.css';\nimport React, { useState } from \"react\"; // Error recovery\n// 1. Catch the error\n// 2. Save a failed transaction somewhere\n// 3. Add an action for re-sending\n\nexport default function Home() {\n  const {\n    0: transactions,\n    1: setTransactions\n  } = useState([]);\n  const {\n    0: submitStatus,\n    1: setSubmitStatus\n  } = useState('');\n  return __jsx(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, \"Account Management App\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  })), __jsx(\"main\", {\n    className: styles.main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, \"Account Management App\"), __jsx(SubmitTransactionForm, {\n    transactions: transactions,\n    setTransactions: setTransactions,\n    submitStatus: submitStatus,\n    setSubmitStatus: setSubmitStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }), __jsx(TransactionList, {\n    transactions: transactions,\n    setTransactions: setTransactions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  })), __jsx(\"footer\", {\n    className: styles.footer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, __jsx(\"a\", {\n    href: \"https://nextjs.org/\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, \"Powered by NextJS\")));\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst SubmitTransactionForm = ({\n  transactions,\n  setTransactions,\n  submitStatus,\n  setSubmitStatus\n}) => {\n  const {\n    0: accountId,\n    1: setAccountId\n  } = useState(\"\");\n  const {\n    0: amount,\n    1: setAmount\n  } = useState(\"\");\n  const {\n    0: earlySubmit,\n    1: setEarlySubmit\n  } = useState(false);\n  const baseUrl = \"http://localhost:8080\";\n\n  const handleSubmit = async evt => {\n    evt.preventDefault(); //TODO if the same accountId and amount as the last submitted & it's less than the limit passed -> prevent\n\n    if (transactions.length > 0 && accountId === transactions[0].accountId && amount === transactions[0].amount && earlySubmit) {\n      // && timer condition \n      setSubmitStatus('You need to wait for 5 seconds before sending a duplicate transaction.');\n      setAmount(\"\");\n      setAccountId(\"\");\n      return;\n    }\n\n    const transactionId = uuidv4();\n    const transactionRow = {\n      transactionId: transactionId,\n      accountId: accountId,\n      amount: amount\n    };\n\n    try {\n      setSubmitStatus('Submitting...');\n      await submitTransaction(transactionId, accountId, amount);\n      const balance = await getBalance(accountId);\n      transactionRow.balance = balance;\n      setTimer(setEarlySubmit);\n      setSubmitStatus('Successfully submitted!');\n      setAmount(\"\");\n      setAccountId(\"\");\n    } catch (error) {\n      transactionRow.failed = true;\n      setSubmitStatus('Failed to submit.');\n      console.log(`Caught this error: ${error}`);\n    }\n\n    setTransactions([transactionRow, ...transactions]);\n  }; // How to handle a re-send\n  // 1. Fetch transaction attributes\n  // 2. Send it\n  // 3. Move it to the top of the list (remove the old, create a new)\n\n\n  const submitTransaction = async (transactionId, accountId, amount) => {\n    return fetch(`${baseUrl}/amount`, {\n      method: 'post',\n      headers: {\n        \"Transaction-Id\": transactionId,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        account_id: accountId,\n        amount: parseInt(amount)\n      })\n    });\n  };\n\n  const getBalance = async accountId => {\n    const getBalanceRes = await fetch(`${baseUrl}/balance/${accountId}`);\n    return (await getBalanceRes.json()).balance;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"h2\", {\n    className: styles.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, \"Submit new transaction\"), __jsx(\"h2\", {\n    \"data-type\": \"warning-message\",\n    className: styles.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, submitStatus), __jsx(\"form\", {\n    \"data-type\": \"transaction-form\",\n    onSubmit: handleSubmit,\n    className: styles.card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, \"Accout ID:\", __jsx(\"input\", {\n    type: \"text\",\n    \"data-type\": \"account-id\",\n    name: \"accountId\",\n    value: accountId,\n    onChange: e => setAccountId(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, \"Amount:\", __jsx(\"input\", {\n    type: \"text\",\n    \"data-type\": \"amount\",\n    name: \"amount\",\n    value: amount,\n    onChange: e => setAmount(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst TransactionList = ({\n  transactions,\n  setTransactions\n}) => {\n  const baseUrl = \"http://localhost:8080\";\n\n  const submitTransaction = async (transactionId, accountId, amount) => {\n    return fetch(`${baseUrl}/amount`, {\n      method: 'post',\n      headers: {\n        \"Transaction-Id\": transactionId,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        account_id: accountId,\n        amount: parseInt(amount)\n      })\n    });\n  };\n\n  const getBalance = async accountId => {\n    const getBalanceRes = await fetch(`${baseUrl}/balance/${accountId}`);\n    return (await getBalanceRes.json()).balance;\n  };\n\n  const onClick = async t => {\n    console.log('Resend' + t.transactionId);\n    const transactionRow = {\n      transactionId: t.transactionId,\n      accountId: t.accountId,\n      amount: t.amount\n    };\n\n    try {\n      submitTransaction(t.transactionId, t.accountId, t.amount);\n      const balance = await getBalance(t.accountId);\n      transactionRow.balance = balance;\n      transactions = transactions.filter(function (obj) {\n        return obj.transactionId !== t.transactionId;\n      });\n      setTransactions([transactionRow, ...transactions]);\n    } catch (error) {\n      console.error('Failed to re-send');\n    }\n  };\n\n  const rows = transactions.map(t => {\n    if (t.failed) {\n      return __jsx(\"a\", {\n        key: t.transactionId,\n        href: \"#\",\n        className: styles.card,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 9\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }\n      }, \"Failed to complete transaction:\"), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }\n      }), __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }\n      }, \"Transaction ID: \", t.transactionId), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }\n      }), __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }\n      }, \"Account ID: \", t.accountId), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }\n      }), __jsx(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }\n      }, \"Amount: \", t.amount), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }\n      }), __jsx(\"button\", {\n        onClick: () => onClick(t),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }\n      }, \"Re-send\"));\n    }\n\n    const action = t.amount < 0 ? \"Withdrew\" : \"Transferred\";\n    const sign = t.balance < 0 ? \"-\" : \"\";\n    const absAmount = Math.abs(parseInt(t.amount));\n    const preposition = t.amount < 0 ? \"from\" : \"to\";\n    return __jsx(\"tr\", {\n      \"data-type\": \"transaction\",\n      key: t.transactionId,\n      className: styles.card,\n      \"data-account-id\": t.accountId,\n      \"data-amount\": t.amount,\n      \"data-balance\": t.balance,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 7\n      }\n    }, __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }\n    }, __jsx(\"a\", {\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    }, action, \" $\", absAmount, \" \", preposition, \" \", t.accountId, \". The current balance of \", t.accountId, \" is \", sign, \"$\", Math.abs(t.balance), \".\"))));\n  });\n  return __jsx(React.Fragment, null, __jsx(\"h2\", {\n    className: styles.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }\n  }, \"Recently submitted transactions\"), __jsx(\"table\", {\n    \"data-type\": \"transactionList\",\n    className: styles.grid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }\n  }, __jsx(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }\n  }, rows)));\n};\n\nfunction setTimer(setEarlySubmit) {\n  const startTimeMS = new Date().getTime();\n  setEarlySubmit(true);\n  setTimeout(() => setEarlySubmit(false), 5000);\n}\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n        v = c == 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}","map":{"version":3,"sources":["/Users/anton.fenske/GitHub/fenske/account-management-frontend-level-3/pages/index.js"],"names":["Head","styles","React","useState","Home","transactions","setTransactions","submitStatus","setSubmitStatus","container","main","title","footer","sleep","ms","Promise","resolve","setTimeout","SubmitTransactionForm","accountId","setAccountId","amount","setAmount","earlySubmit","setEarlySubmit","baseUrl","handleSubmit","evt","preventDefault","length","transactionId","uuidv4","transactionRow","submitTransaction","balance","getBalance","setTimer","error","failed","console","log","fetch","method","headers","body","JSON","stringify","account_id","parseInt","getBalanceRes","json","description","card","e","target","value","TransactionList","onClick","t","filter","obj","rows","map","action","sign","absAmount","Math","abs","preposition","grid","startTimeMS","Date","getTime","replace","c","r","random","v","toString"],"mappings":"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","sourcesContent":["import Head from 'next/head'\nimport styles from '../styles/Home.module.css'\nimport React, { useState } from \"react\";\n\n\n// Error recovery\n// 1. Catch the error\n// 2. Save a failed transaction somewhere\n// 3. Add an action for re-sending\n\nexport default function Home() {\n  const [transactions, setTransactions] = useState([]);\n  const [submitStatus, setSubmitStatus] = useState('');\n  return (\n    <div className={styles.container}>\n      <Head>\n        <title>Account Management App</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <main className={styles.main}>\n        <h1 className={styles.title}>\n          Account Management App\n        </h1>\n        <SubmitTransactionForm transactions={transactions} setTransactions={setTransactions} submitStatus={submitStatus} setSubmitStatus={setSubmitStatus}/>\n        <br />\n        <br />\n        <TransactionList transactions={transactions} setTransactions={setTransactions}/>\n      </main>\n\n      <footer className={styles.footer}>\n        <a\n          href=\"https://nextjs.org/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Powered by NextJS\n        </a>\n      </footer>\n    </div>\n  )\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst SubmitTransactionForm = ({transactions, setTransactions, submitStatus, setSubmitStatus}) => {\n  const [accountId, setAccountId] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [earlySubmit, setEarlySubmit] = useState(false);\n  const baseUrl = \"http://localhost:8080\"\n\n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n    //TODO if the same accountId and amount as the last submitted & it's less than the limit passed -> prevent\n    if (transactions.length > 0 && accountId === transactions[0].accountId && amount === transactions[0].amount && earlySubmit) { // && timer condition \n      setSubmitStatus('You need to wait for 5 seconds before sending a duplicate transaction.');\n      setAmount(\"\");\n      setAccountId(\"\");\n      return;\n    } \n\n    const transactionId = uuidv4();\n    const transactionRow = {\n      transactionId: transactionId,\n      accountId: accountId,\n      amount: amount\n    }\n    try {\n      setSubmitStatus('Submitting...')\n      await submitTransaction(transactionId, accountId, amount);\n      const balance = await getBalance(accountId);\n      transactionRow.balance = balance;\n      setTimer(setEarlySubmit);\n      setSubmitStatus('Successfully submitted!')\n      setAmount(\"\");\n      setAccountId(\"\");\n    } catch(error) {\n      transactionRow.failed = true;\n      setSubmitStatus('Failed to submit.')\n      console.log(`Caught this error: ${error}`);\n    }\n    setTransactions([transactionRow, ...transactions]);\n  }\n\n  // How to handle a re-send\n  // 1. Fetch transaction attributes\n  // 2. Send it\n  // 3. Move it to the top of the list (remove the old, create a new)\n\n  const submitTransaction = async (transactionId, accountId, amount) => {\n    return fetch(`${baseUrl}/amount`, {\n      method: 'post',\n      headers: {\n        \"Transaction-Id\": transactionId,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        account_id: accountId,\n        amount: parseInt(amount)\n      })\n    });\n  }\n\n  const getBalance = async (accountId) => {\n    const getBalanceRes = await fetch(`${baseUrl}/balance/${accountId}`);\n    return (await getBalanceRes.json()).balance;\n  };\n\n  return (\n    <>\n      <h2 className={styles.description}>Submit new transaction</h2>\n      <h2 data-type=\"warning-message\" className={styles.description}>{submitStatus}</h2>\n      <form data-type=\"transaction-form\" onSubmit={handleSubmit} className={styles.card}>\n        <label>\n          Accout ID:\n          <input\n            type=\"text\"\n            data-type=\"account-id\"\n            name=\"accountId\"\n            value={accountId}\n            onChange={e => setAccountId(e.target.value)}\n          />\n        </label>\n        <br />\n        <br />\n        <label>\n          Amount:\n          <input\n            type=\"text\"\n            data-type=\"amount\"\n            name=\"amount\"\n            value={amount}\n            onChange={e => setAmount(e.target.value)}\n          />\n        </label>\n        <br />\n        <br />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    </>\n  );\n}\n\nconst TransactionList = ({ transactions, setTransactions }) => {\n\n  const baseUrl = \"http://localhost:8080\"\n\n  const submitTransaction = async (transactionId, accountId, amount) => {\n    return fetch(`${baseUrl}/amount`, {\n      method: 'post',\n      headers: {\n        \"Transaction-Id\": transactionId,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        account_id: accountId,\n        amount: parseInt(amount)\n      })\n    });\n  }\n\n  const getBalance = async (accountId) => {\n    const getBalanceRes = await fetch(`${baseUrl}/balance/${accountId}`);\n    return (await getBalanceRes.json()).balance;\n  };\n\n  const onClick = async (t) => {\n    console.log('Resend' + t.transactionId);\n    const transactionRow = {\n      transactionId: t.transactionId,\n      accountId: t.accountId,\n      amount: t.amount\n    }\n    try {\n      submitTransaction(t.transactionId, t.accountId, t.amount);\n      const balance = await getBalance(t.accountId);\n      transactionRow.balance = balance;\n      transactions = transactions.filter(function( obj ) {\n        return obj.transactionId !== t.transactionId;\n      });\n      setTransactions([transactionRow, ...transactions]);\n    } catch(error) {\n      console.error('Failed to re-send');\n    }\n\n  }\n\n  const rows = transactions.map(t => {\n    if (t.failed) {\n      return (\n        <a key={t.transactionId} href=\"#\" className={styles.card}>\n          <p>Failed to complete transaction:</p>\n          <br />\n          <b>Transaction ID: {t.transactionId}</b>\n          <br />\n          <b>Account ID: {t.accountId}</b>\n          <br />\n          <b>Amount: {t.amount}</b>\n          <br />\n          <button onClick={() => onClick(t)} >Re-send</button>\n        </a>\n        );\n    }\n    const action = t.amount < 0 ? \"Withdrew\" : \"Transferred\";\n    const sign = t.balance < 0 ? \"-\" : \"\";\n    const absAmount = Math.abs(parseInt(t.amount));\n    const preposition = t.amount < 0 ? \"from\" : \"to\";\n    return (\n      <tr data-type=\"transaction\" key={t.transactionId} className={styles.card} data-account-id={t.accountId} data-amount={t.amount} data-balance={t.balance}>\n        <td>\n          <a href=\"#\">\n            <p>{action} ${absAmount} {preposition} {t.accountId}. The current balance of {t.accountId} is {sign}${Math.abs(t.balance)}.</p>\n          </a>\n        </td>\n      </tr>\n    )\n  });\n  return (\n    <>\n      <h2 className={styles.description}>Recently submitted transactions</h2>\n      <table data-type=\"transactionList\" className={styles.grid}>\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n    </>\n  );\n}\n\nfunction setTimer(setEarlySubmit) {\n  const startTimeMS = (new Date()).getTime();\n  setEarlySubmit(true);\n  setTimeout(() => setEarlySubmit(false), 5000);\n}\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}"]},"metadata":{},"sourceType":"module"}