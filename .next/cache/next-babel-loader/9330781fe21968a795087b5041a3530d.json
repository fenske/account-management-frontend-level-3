{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/anton.fenske/GitHub/fenske/account-management-frontend-level-3/pages/index.js\",\n    _s = $RefreshSig$(),\n    _this = this,\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport styles from '../styles/Home.module.css';\nimport React, { useState } from \"react\"; // Error recovery\n// 1. Catch the error\n// 2. Save a failed transaction somewhere\n// 3. Add an action for re-sending\n\nexport default function Home() {\n  _s();\n\n  var _useState = useState([]),\n      transactions = _useState[0],\n      setTransactions = _useState[1];\n\n  var _useState2 = useState(''),\n      submitStatus = _useState2[0],\n      setSubmitStatus = _useState2[1];\n\n  return __jsx(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, \"Account Management App\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  })), __jsx(\"main\", {\n    className: styles.main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, \"Account Management App\"), __jsx(SubmitTransactionForm, {\n    transactions: transactions,\n    setTransactions: setTransactions,\n    submitStatus: submitStatus,\n    setSubmitStatus: setSubmitStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }), __jsx(TransactionList, {\n    transactions: transactions,\n    setTransactions: setTransactions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  })), __jsx(\"footer\", {\n    className: styles.footer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, __jsx(\"a\", {\n    href: \"https://nextjs.org/\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, \"Powered by NextJS\")));\n}\n\n_s(Home, \"fofFnIfTh8xJIJjA10Nt/CbyoMo=\");\n\n_c = Home;\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\n\nvar SubmitTransactionForm = function SubmitTransactionForm(_ref) {\n  _s2();\n\n  var transactions = _ref.transactions,\n      setTransactions = _ref.setTransactions,\n      submitStatus = _ref.submitStatus,\n      setSubmitStatus = _ref.setSubmitStatus;\n\n  var _useState3 = useState(\"\"),\n      accountId = _useState3[0],\n      setAccountId = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      amount = _useState4[0],\n      setAmount = _useState4[1];\n\n  var _useState5 = useState(false),\n      earlySubmit = _useState5[0],\n      setEarlySubmit = _useState5[1];\n\n  var baseUrl = \"http://localhost:8080\";\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(evt) {\n      var transactionId, transactionRow, balance;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              evt.preventDefault(); //TODO if the same accountId and amount as the last submitted & it's less than the limit passed -> prevent\n\n              if (!(transactions.length > 0 && accountId === transactions[0].accountId && amount === transactions[0].amount && earlySubmit)) {\n                _context.next = 6;\n                break;\n              }\n\n              // && timer condition \n              setSubmitStatus('You need to wait for 5 seconds before sending a duplicate transaction.');\n              setAmount(\"\");\n              setAccountId(\"\");\n              return _context.abrupt(\"return\");\n\n            case 6:\n              transactionId = uuidv4();\n              transactionRow = {\n                transactionId: transactionId,\n                accountId: accountId,\n                amount: amount\n              };\n              _context.prev = 8;\n              setSubmitStatus('Submitting...');\n              _context.next = 12;\n              return submitTransaction(transactionId, accountId, amount);\n\n            case 12:\n              _context.next = 14;\n              return getBalance(accountId);\n\n            case 14:\n              balance = _context.sent;\n              transactionRow.balance = balance;\n              setTimer(setEarlySubmit);\n              setSubmitStatus('Successfully submitted!');\n              setAmount(\"\");\n              setAccountId(\"\");\n              _context.next = 27;\n              break;\n\n            case 22:\n              _context.prev = 22;\n              _context.t0 = _context[\"catch\"](8);\n              transactionRow.failed = true;\n              setSubmitStatus('Failed to submit.');\n              console.log(\"Caught this error: \".concat(_context.t0));\n\n            case 27:\n              setTransactions([transactionRow].concat(_toConsumableArray(transactions)));\n\n            case 28:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[8, 22]]);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // How to handle a re-send\n  // 1. Fetch transaction attributes\n  // 2. Send it\n  // 3. Move it to the top of the list (remove the old, create a new)\n\n\n  var submitTransaction = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(transactionId, accountId, amount) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", fetch(\"\".concat(baseUrl, \"/amount\"), {\n                method: 'post',\n                headers: {\n                  \"Transaction-Id\": transactionId,\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  account_id: accountId,\n                  amount: parseInt(amount)\n                })\n              }));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function submitTransaction(_x2, _x3, _x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var getBalance = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(accountId) {\n      var getBalanceRes;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return fetch(\"\".concat(baseUrl, \"/balance/\").concat(accountId));\n\n            case 2:\n              getBalanceRes = _context3.sent;\n              _context3.next = 5;\n              return getBalanceRes.json();\n\n            case 5:\n              return _context3.abrupt(\"return\", _context3.sent.balance);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getBalance(_x5) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(\"h2\", {\n    className: styles.description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, \"Submit new transaction\"), __jsx(\"h2\", {\n    \"data-type\": \"warning-message\",\n    className: styles.description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, submitStatus), __jsx(\"form\", {\n    \"data-type\": \"transaction-form\",\n    onSubmit: handleSubmit,\n    className: styles.card,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, \"Accout ID:\", __jsx(\"input\", {\n    type: \"text\",\n    \"data-type\": \"account-id\",\n    name: \"accountId\",\n    value: accountId,\n    onChange: function onChange(e) {\n      return setAccountId(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  })), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, \"Amount:\", __jsx(\"input\", {\n    type: \"text\",\n    \"data-type\": \"amount\",\n    name: \"amount\",\n    value: amount,\n    onChange: function onChange(e) {\n      return setAmount(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  })), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s2(SubmitTransactionForm, \"XxR2mQDbjF/eOWngpWacuvhah+0=\");\n\n_c2 = SubmitTransactionForm;\n\nvar TransactionList = function TransactionList(_ref5) {\n  var transactions = _ref5.transactions,\n      setTransactions = _ref5.setTransactions;\n  var baseUrl = \"http://localhost:8080\";\n\n  var submitTransaction = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(transactionId, accountId, amount) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", fetch(\"\".concat(baseUrl, \"/amount\"), {\n                method: 'post',\n                headers: {\n                  \"Transaction-Id\": transactionId,\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  account_id: accountId,\n                  amount: parseInt(amount)\n                })\n              }));\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function submitTransaction(_x6, _x7, _x8) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var getBalance = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(accountId) {\n      var getBalanceRes;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return fetch(\"\".concat(baseUrl, \"/balance/\").concat(accountId));\n\n            case 2:\n              getBalanceRes = _context5.sent;\n              _context5.next = 5;\n              return getBalanceRes.json();\n\n            case 5:\n              return _context5.abrupt(\"return\", _context5.sent.balance);\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function getBalance(_x9) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var _onClick = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(t) {\n      var transactionRow, balance;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              console.log('Resend' + t.transactionId);\n              transactionRow = {\n                transactionId: t.transactionId,\n                accountId: t.accountId,\n                amount: t.amount\n              };\n              _context6.prev = 2;\n              submitTransaction(t.transactionId, t.accountId, t.amount);\n              _context6.next = 6;\n              return getBalance(t.accountId);\n\n            case 6:\n              balance = _context6.sent;\n              transactionRow.balance = balance;\n              transactions = transactions.filter(function (obj) {\n                return obj.transactionId !== t.transactionId;\n              });\n              setTransactions([transactionRow].concat(_toConsumableArray(transactions)));\n              _context6.next = 15;\n              break;\n\n            case 12:\n              _context6.prev = 12;\n              _context6.t0 = _context6[\"catch\"](2);\n              console.error('Failed to re-send');\n\n            case 15:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[2, 12]]);\n    }));\n\n    return function onClick(_x10) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  var rows = transactions.map(function (t) {\n    if (t.failed) {\n      return __jsx(\"a\", {\n        key: t.transactionId,\n        href: \"#\",\n        className: styles.card,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 9\n        }\n      }, __jsx(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }\n      }, \"Failed to complete transaction:\"), __jsx(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }\n      }), __jsx(\"b\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }\n      }, \"Transaction ID: \", t.transactionId), __jsx(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }\n      }), __jsx(\"b\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }\n      }, \"Account ID: \", t.accountId), __jsx(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }\n      }), __jsx(\"b\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }\n      }, \"Amount: \", t.amount), __jsx(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }\n      }), __jsx(\"button\", {\n        onClick: function onClick() {\n          return _onClick(t);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }\n      }, \"Re-send\"));\n    }\n\n    var action = t.amount < 0 ? \"Withdrew\" : \"Transferred\";\n    var sign = t.balance < 0 ? \"-\" : \"\";\n    var absAmount = Math.abs(parseInt(t.amount));\n    var preposition = t.amount < 0 ? \"from\" : \"to\";\n    return __jsx(\"tr\", {\n      \"data-type\": \"transaction\",\n      key: t.transactionId,\n      className: styles.card,\n      \"data-account-id\": t.accountId,\n      \"data-amount\": t.amount,\n      \"data-balance\": t.balance,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 7\n      }\n    }, __jsx(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }\n    }, __jsx(\"a\", {\n      href: \"#\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    }, action, \" $\", absAmount, \" \", preposition, \" \", t.accountId, \". The current balance of \", t.accountId, \" is \", sign, \"$\", Math.abs(t.balance), \".\"))));\n  });\n  return __jsx(React.Fragment, null, __jsx(\"h2\", {\n    className: styles.description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }\n  }, \"Recently submitted transactions\"), __jsx(\"table\", {\n    \"data-type\": \"transactionList\",\n    className: styles.grid,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }\n  }, __jsx(\"tbody\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }\n  }, rows)));\n};\n\n_c3 = TransactionList;\n\nfunction setTimer(setEarlySubmit) {\n  var startTimeMS = new Date().getTime();\n  setEarlySubmit(true);\n  setTimeout(function () {\n    return setEarlySubmit(false);\n  }, 5000);\n}\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n        v = c == 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Home\");\n$RefreshReg$(_c2, \"SubmitTransactionForm\");\n$RefreshReg$(_c3, \"TransactionList\");","map":{"version":3,"sources":["/Users/anton.fenske/GitHub/fenske/account-management-frontend-level-3/pages/index.js"],"names":["Head","styles","React","useState","Home","transactions","setTransactions","submitStatus","setSubmitStatus","container","main","title","footer","sleep","ms","Promise","resolve","setTimeout","SubmitTransactionForm","accountId","setAccountId","amount","setAmount","earlySubmit","setEarlySubmit","baseUrl","handleSubmit","evt","preventDefault","length","transactionId","uuidv4","transactionRow","submitTransaction","getBalance","balance","setTimer","failed","console","log","fetch","method","headers","body","JSON","stringify","account_id","parseInt","getBalanceRes","json","description","card","e","target","value","TransactionList","onClick","t","filter","obj","error","rows","map","action","sign","absAmount","Math","abs","preposition","grid","startTimeMS","Date","getTime","replace","c","r","random","v","toString"],"mappings":"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","sourcesContent":["import Head from 'next/head'\nimport styles from '../styles/Home.module.css'\nimport React, { useState } from \"react\";\n\n\n// Error recovery\n// 1. Catch the error\n// 2. Save a failed transaction somewhere\n// 3. Add an action for re-sending\n\nexport default function Home() {\n  const [transactions, setTransactions] = useState([]);\n  const [submitStatus, setSubmitStatus] = useState('');\n  return (\n    <div className={styles.container}>\n      <Head>\n        <title>Account Management App</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <main className={styles.main}>\n        <h1 className={styles.title}>\n          Account Management App\n        </h1>\n        <SubmitTransactionForm transactions={transactions} setTransactions={setTransactions} submitStatus={submitStatus} setSubmitStatus={setSubmitStatus}/>\n        <br />\n        <br />\n        <TransactionList transactions={transactions} setTransactions={setTransactions}/>\n      </main>\n\n      <footer className={styles.footer}>\n        <a\n          href=\"https://nextjs.org/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Powered by NextJS\n        </a>\n      </footer>\n    </div>\n  )\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst SubmitTransactionForm = ({transactions, setTransactions, submitStatus, setSubmitStatus}) => {\n  const [accountId, setAccountId] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [earlySubmit, setEarlySubmit] = useState(false);\n  const baseUrl = \"http://localhost:8080\"\n\n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n    //TODO if the same accountId and amount as the last submitted & it's less than the limit passed -> prevent\n    if (transactions.length > 0 && accountId === transactions[0].accountId && amount === transactions[0].amount && earlySubmit) { // && timer condition \n      setSubmitStatus('You need to wait for 5 seconds before sending a duplicate transaction.');\n      setAmount(\"\");\n      setAccountId(\"\");\n      return;\n    } \n\n    const transactionId = uuidv4();\n    const transactionRow = {\n      transactionId: transactionId,\n      accountId: accountId,\n      amount: amount\n    }\n    try {\n      setSubmitStatus('Submitting...')\n      await submitTransaction(transactionId, accountId, amount);\n      const balance = await getBalance(accountId);\n      transactionRow.balance = balance;\n      setTimer(setEarlySubmit);\n      setSubmitStatus('Successfully submitted!')\n      setAmount(\"\");\n      setAccountId(\"\");\n    } catch(error) {\n      transactionRow.failed = true;\n      setSubmitStatus('Failed to submit.')\n      console.log(`Caught this error: ${error}`);\n    }\n    setTransactions([transactionRow, ...transactions]);\n  }\n\n  // How to handle a re-send\n  // 1. Fetch transaction attributes\n  // 2. Send it\n  // 3. Move it to the top of the list (remove the old, create a new)\n\n  const submitTransaction = async (transactionId, accountId, amount) => {\n    return fetch(`${baseUrl}/amount`, {\n      method: 'post',\n      headers: {\n        \"Transaction-Id\": transactionId,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        account_id: accountId,\n        amount: parseInt(amount)\n      })\n    });\n  }\n\n  const getBalance = async (accountId) => {\n    const getBalanceRes = await fetch(`${baseUrl}/balance/${accountId}`);\n    return (await getBalanceRes.json()).balance;\n  };\n\n  return (\n    <>\n      <h2 className={styles.description}>Submit new transaction</h2>\n      <h2 data-type=\"warning-message\" className={styles.description}>{submitStatus}</h2>\n      <form data-type=\"transaction-form\" onSubmit={handleSubmit} className={styles.card}>\n        <label>\n          Accout ID:\n          <input\n            type=\"text\"\n            data-type=\"account-id\"\n            name=\"accountId\"\n            value={accountId}\n            onChange={e => setAccountId(e.target.value)}\n          />\n        </label>\n        <br />\n        <br />\n        <label>\n          Amount:\n          <input\n            type=\"text\"\n            data-type=\"amount\"\n            name=\"amount\"\n            value={amount}\n            onChange={e => setAmount(e.target.value)}\n          />\n        </label>\n        <br />\n        <br />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    </>\n  );\n}\n\nconst TransactionList = ({ transactions, setTransactions }) => {\n\n  const baseUrl = \"http://localhost:8080\"\n\n  const submitTransaction = async (transactionId, accountId, amount) => {\n    return fetch(`${baseUrl}/amount`, {\n      method: 'post',\n      headers: {\n        \"Transaction-Id\": transactionId,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        account_id: accountId,\n        amount: parseInt(amount)\n      })\n    });\n  }\n\n  const getBalance = async (accountId) => {\n    const getBalanceRes = await fetch(`${baseUrl}/balance/${accountId}`);\n    return (await getBalanceRes.json()).balance;\n  };\n\n  const onClick = async (t) => {\n    console.log('Resend' + t.transactionId);\n    const transactionRow = {\n      transactionId: t.transactionId,\n      accountId: t.accountId,\n      amount: t.amount\n    }\n    try {\n      submitTransaction(t.transactionId, t.accountId, t.amount);\n      const balance = await getBalance(t.accountId);\n      transactionRow.balance = balance;\n      transactions = transactions.filter(function( obj ) {\n        return obj.transactionId !== t.transactionId;\n      });\n      setTransactions([transactionRow, ...transactions]);\n    } catch(error) {\n      console.error('Failed to re-send');\n    }\n\n  }\n\n  const rows = transactions.map(t => {\n    if (t.failed) {\n      return (\n        <a key={t.transactionId} href=\"#\" className={styles.card}>\n          <p>Failed to complete transaction:</p>\n          <br />\n          <b>Transaction ID: {t.transactionId}</b>\n          <br />\n          <b>Account ID: {t.accountId}</b>\n          <br />\n          <b>Amount: {t.amount}</b>\n          <br />\n          <button onClick={() => onClick(t)} >Re-send</button>\n        </a>\n        );\n    }\n    const action = t.amount < 0 ? \"Withdrew\" : \"Transferred\";\n    const sign = t.balance < 0 ? \"-\" : \"\";\n    const absAmount = Math.abs(parseInt(t.amount));\n    const preposition = t.amount < 0 ? \"from\" : \"to\";\n    return (\n      <tr data-type=\"transaction\" key={t.transactionId} className={styles.card} data-account-id={t.accountId} data-amount={t.amount} data-balance={t.balance}>\n        <td>\n          <a href=\"#\">\n            <p>{action} ${absAmount} {preposition} {t.accountId}. The current balance of {t.accountId} is {sign}${Math.abs(t.balance)}.</p>\n          </a>\n        </td>\n      </tr>\n    )\n  });\n  return (\n    <>\n      <h2 className={styles.description}>Recently submitted transactions</h2>\n      <table data-type=\"transactionList\" className={styles.grid}>\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n    </>\n  );\n}\n\nfunction setTimer(setEarlySubmit) {\n  const startTimeMS = (new Date()).getTime();\n  setEarlySubmit(true);\n  setTimeout(() => setEarlySubmit(false), 5000);\n}\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}"]},"metadata":{},"sourceType":"module"}